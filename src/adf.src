

/*
**> adf
**  Reference:
**  Dickey, D.A., Fuller, W.A. (1979).
**  Distribution of the estimators for autoregressive time series with a unit root.
**  Journal of the American Statistical Society75, 427â€“431.
**
**  Format:  {tstat,p} = ADF(y,model,pmax,ic);
**
**  Input:   Y	     -  Nx1 matrix, data,
**           model   - 	0 = none
**                      1 = model with constant
**                      2 = model with constant and trend
**           pmax    -  Maximum number of lags for Dy; 0=no lags
**           ic      -  Information Criterion:
**                      1=Akaike
**                      2=Schwarz
**                      3=t-stat significance
**
**  Output:  tstat   - ADF statistic
**			 p       - number of lags selected by chosen information criterion
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/


proc(2)=ADF(y, model, pmax, ic);
    local t, p, j, taup, aicp, sicp, tstatp, check;
    local dy, ly, dc, dt, lmat, dep, y1, ldy;
    local sbt, trnd, x, lagt, tau, LL, n, k;
    local b, e1, sig2, se, ssr;
    
    t = rows(y);
    taup = zeros(pmax + 1, 1);
    aicp = zeros(pmax + 1, 1);
    sicp = zeros(pmax + 1, 1);
    tstatp = zeros(pmax + 1, 1);
    
    dy = diff(y, 1);
    ly = lagn(y, 1);
    dc = ones(t, 1);       /*Deterministic term=constant*/
    dt = seqa(1, 1, t);     /*Deterministic term=trend*/
    
    p = 0;
    do while p <= pmax;
        lmat = zeros(rows(dy), p + 1);
        j = 1;
        do while j <= p;
            lmat[., j] = lagn(dy, j);
            j = j + 1;
        endo;
        dep = trimr(dy, p + 1, 0);
        y1 = trimr(ly, p + 1, 0);
        ldy = trimr(lmat, p + 1, 0);
        sbt = trimr(dc, p + 1, 0);
        trnd = trimr(dt, p + 1, 0);
        
        if p == 0;
            if model == 0;
                x = y1;
            endif;
            if model == 1;
                x = y1~sbt;
            endif;
            if model == 2;
                x = y1~sbt~trnd;
            endif;
        elseif p > 0;
            if model == 0;
                x = y1~ldy[., 1:p];
            endif;
            if model == 1;
                x = y1~sbt~ldy[., 1:p];
            endif;
            if model == 2;
                x = y1~sbt~trnd~ldy[., 1:p];
            endif;
        endif;
        
        {b, e1, sig2, se, ssr} = myols(dep, x);
        taup[p+1] = b[1]/se[1];
        n = rows(x);
        k = cols(x);
        
        // Log-likelihood
        LL = -n/2 * (1 + ln(2*pi) + ln(e1'e1/n));     
        
        aicp[p+1] = (2 * k-2 * LL)/n;
        sicp[p+1] = (k * ln(n) - 2 * LL)/n;
        tstatp[p+1] = abs(b[cols(x)]/se[cols(x)]);
        p = p + 1;
    endo;
    
    p  = _get_lag(ic, pmax, aicp, sicp, tstatp);
    tau = taup[p];
    
    retp(tau, p - 1);
endp;
